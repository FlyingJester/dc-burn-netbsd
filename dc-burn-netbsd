#!/bin/sh -e

dist_proto=http
dist_host=ftp.netbsd.org
dist_path=/pub/NetBSD
version=6.0_BETA2
kernel_type=GENERIC_MD
tmpdir=dc-burn-netbsd-files
opt_cdrecord="driveropts=burnfree gracetime=3"

# Copyright (c) 2012 David Brownlee (Standard 2 clause BSD licence)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

while getopts Cc:d:hk:nr:v: f; do
    case $f in
        C)  opt_clean=1 ;;
        v)  version="$OPTARG" ;;
        c)  opt_cdrecord="$OPTARG" ;;
	d)  opt_distdir="$OPTARG" ;;
	r)  case "$OPTARG" in
		base) opt_release='^(base|etc).*z$' ;;
		std) opt_release='^[^x].*z$' ;;
		x) opt_release='.*z$' ;;
		*) opt_show_help=1; echo '-r must be base, std or x' ;;
	    esac
	    ;;
        h)  opt_show_help=1 ;;
        k)  kernel_type="$OPTARG" ;;
        n)  opt_nowrite=1 ;;
        t)  tmpdir="$OPTARG" ;;
  esac
done
shift $(expr $OPTIND - 1)

# sample to work out most recent version...
# ftp -o - http://ftp.netbsd.org/pub/NetBSD/ | \
# sed -n 's/.*<a href="NetBSD-\([0-9][^"]*\)\/".*/\1/p'|tail -1

if [ $# != 0 -o -n "$opt_show_help" ] ; then
    cat <<END
Usage: dc-burn-netbsd [opts]
 -C      : Clean work directory before starting
 -c opts : Set cdrecord opts ($opt_cdrecord)
 -d      : Take kernel/ & sets/ under distdir - no downloading
 -h      : This help
 -k type : Set kernel type ($kernel_type) eg: GENERIC or GENERIC_MD
 -n      : Generate data but do not write (just display cdrecord commands)
 -r type : Include NetBSD release on CD, type is base, std, or x
 -t tmpd : Set temporary work directory to tmpd
 -v vers : Set NetBSD version ($version) eg: 5.1 6.0_BETA2

dc-burn will create a temporary work directory $tmpdir which will
need to have sufficient space to store the downloaded & generated files.

if -d is used the directory is expected to match the layout on ftp.netbsd.org:
 - kernel/netbsd-\$type.bin.gz, and
 - sets/base.tgz (etc - if -r given)

END
    exit;
fi

if [ $(id -u) != 0 ] ; then
    if [ -n "$opt_release" ]; then
        echo "Error: must be root to include release files"
	exit 1
    fi
    if [ -z "$opt_nowrite" ]; then
        echo "Warning: Not running as root - assuming -n"
	opt_nowrite=1
    fi
fi

dist_url=$dist_proto://$dist_host$dist_path/NetBSD-$version/dreamcast/binary
sets_url_dir=$dist_url/sets
kernel_url_dir=$dist_url/kernel

if [ -n "$opt_distdir" ] ; then
    distdir=$opt_distdir
else
    distdir=download/$version
fi

if [ -n "$opt_clean" ] ; then
    rm -rf $tmpdir
fi
mkdir -p $tmpdir
cd $tmpdir

fetch_file()
{
url=$1
file=$2
echo -n "$file: "
if [ ! -f $file ] ; then
    mkdir -p $(dirname $file)
    ftp -o $file.tmp $url
    mv $file.tmp $file
else
    echo "already present"
fi
}

download_sets()
{
download_dir=$1
match="$2"
for f in $(ftp -o - $sets_url_dir/ | sed -n 's/.*<a href="\([^"]*z\)".*/\1/p' | egrep "$match"); do
    fetch_file $sets_url_dir/$f $download_dir/$f
done
}

release_sets()
{
sets_dir=$1
match="$2"
if [ -z "$match" ] ; then
    return
fi
ls $sets_dir | egrep "$match" | sed "s:^:$sets_dir/:"
}

extract_sets()
{
data_dir=$1
sets_dir=$2
match=$3
for tarfile in $(release_sets $sets_dir "$match") ; do
    echo " - $tarfile"
    tar xpzf $tarfile -C $data_dir
done

if [ -x $data_dir/dev/MAKEDEV ] ; then
    echo "Run MAKEDEV"
    (cd $data_dir/dev && ./MAKEDEV all)
fi

echo "Create fstab"
cat > $data_dir/etc/fstab << END
/dev/gdrom0a /           cd9660 ro 0 0
END

mkdir -p $data_dir/.tmpfs
if [ ! -f $data_dir/etc/rc.d/tmpfs ] ; then
    echo "Create rc.d/tmpfs"
    cat > $data_dir/etc/rc.d/tmpfs <<END
#!/bin/sh

# REQUIRE: DISKS 
# PROVIDE: tmpfs
# BEFORE:  mountcritlocal
 
$_rc_subr_loaded . /etc/rc.subr

name="tmpfs"
start_cmd="tmpfs_start"

tmpfs_start()
{
        mount -t tmpfs tmpfs /.tmpfs
        for dir in dev etc root var ; do
                mkdir -p /.tmpfs/$dir
                mount -t union /.tmpfs/$dir /$dir
        done
}
 
load_rc_config $name
run_rc_command "$1"
END

fi

if grep -q 'rc_configured=NO' $data_dir/etc/rc.conf ; then
    echo "Update rc.conf"
    (
    sed 's/rc_configured=NO/rc_configured=YES/' $data_dir/etc/rc.conf
    echo 'dhcpcd=YES'
    echo 'wscons=YES'
    echo 'sshd=YES'
    echo 'inetd=NO'
    echo 'cron=NO'
    echo 'critical_filesystems_local="/.tmpfs/etc /etc /.tmpfs/dev /dev /.tmpfs/var /var"'
    ) > $data_dir/etc/rc.conf.tmp
    mv $data_dir/etc/rc.conf.tmp $data_dir/etc/rc.conf
fi

if ! grep -q '^PermitRootLogin yes' $data_dir/etc/ssh/sshd_config ; then
    echo "Add PermitRootLogin yes to sshd_config"
    echo "PermitRootLogin yes" >> $data_dir/etc/ssh/sshd_config
fi

if grep -q 'unknown off' $data_dir/etc/ttys ; then
    echo "Set wsvt25 in ttys"
    sed 's/unknown off/wsvt25  off/' $data_dir/etc/ttys > $data_dir/etc/ttys.tmp
    mv $data_dir/etc/ttys.tmp $data_dir/etc/ttys
fi

}

prepare_audio_track()
{
audio_file=$1
echo -n "$audio_file: "
if [ ! -f $audio_file ] ; then
    dd if=/dev/zero bs=2352 count=300 of=$audio_file # Min 4 seconds audio
else
    echo "already present"
fi
}

prepare_ip_txt()
{
ip_file=$1
ip_boot=$2	# Must be ISO9660 compliant - all caps FILE.EXT
ip_name=$3
cat > $ip_file <<END
Hardware ID   : SEGA SEGAKATANA
Maker ID      : SEGA ENTERPRISES
Device Info   : 0000 CD-ROM1/1
Area Symbols  : JUE
Peripherals   : E000F10
Product No    : T0000
Version       : V1.000
Release Date  : $(date +%Y%M%d)
Boot Filename : $ip_boot
SW Maker Name : NetBSD
Game Title    : $ip_name
END
}
run_cdrecord()
{
echo cdrecord "$@"
if [ -z "$opt_nowrite" ] ; then
    cdrecord "$@"
fi
}

kernel_file=netbsd-$kernel_type.bin.gz
kernel=$distdir/kernel/$kernel_file
if [ ! -n "$opt_distdir" ]; then # no distdir specified, download if necessary

    echo; echo ">> Download and uncompress kernel if needed"
    fetch_file $kernel_url_dir/$kernel_file $kernel

    if [ -n "$opt_release" ] ; then
        echo; echo ">> Download all release sets"
        download_sets $distdir/sets "$opt_release"
    fi
fi # distdir

echo; echo ">> Create audio track"
prepare_audio_track audio.raw

echo; echo ">> Generate the ip.txt file and use to create IP.BIN bootloader"
prepare_ip_txt ip.txt NETBSD.BIN $version-$kernel_type
dc-makeip ip.txt ip.bin

dist_details="$(ls -l $kernel $(release_sets $distdir/sets "$opt_release"))"
if [ "$(test -f data/.dist && cat data/.dist)" = "$dist_details" ]; then
    echo "Contents of data already match requirements"
else
    echo ; echo ">> Clean data dir"
    rm -rf data
    mkdir -p data

    echo; echo ">> Scramble $kernel_type kernel into loadable format"
    zcat $kernel > netbsd.tmp
    dc-scramble netbsd.tmp data/NETBSD.BIN
    rm -f netbsd.tmp

    if [ -n "$opt_release" ] ; then
	echo; echo ">> Extract sets ($opt_release)"
	extract_sets data $distdir/sets "$opt_release"
    fi
    echo "$dist_details" > data/.dist
fi

# 
echo; echo ">> Create filesystem with boot loader"
cp ip.bin data.raw
( cd data && mkisofs -quiet -R -l -C 0,11702 -o - . | dd bs=2048 skip=16 ) \
	>> data.raw

echo; echo ">> Burn CD"
echo "cd $tmpdir"
run_cdrecord $opt_cdrecord -multi -audio audio.raw
run_cdrecord $opt_cdrecord -multi -multi -xa -eject data.raw

rm ip.txt ip.bin
